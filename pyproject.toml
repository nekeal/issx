[tool.poetry]
name = "issx"
version = "0.0.1"
description = "Tool for synchronizing issues between different services"
authors = [
    "nekeal <szymon.sc.cader@gmail.com>",
]
license = "MIT"
readme = "README.md"

documentation = "https://nekeal.github.io/issx"
homepage = "https://nekeal.github.io/issx"
repository = "https://github.com/nekeal/issx"

classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Typing :: Typed",
]

packages = [
    { include = "issx", from = "src" }
]

[tool.poetry.dependencies]
python = ">=3.11, <4.0"

[tool.poetry.group.dev.dependencies]
mkdocstrings = {version = ">=0.18", extras = ["python"]}
mkdocs-material = "*"
mypy = "*"
pre-commit = "*"
pymdown-extensions = "*"
pytest = "*"
pytest-github-actions-annotate-failures = "*"
pytest-cov = "*"
python-kacl = "*"
ruff = "*"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".eggs",
    ".tox",
]
ignore = [
    # flake8-builtins
    # the likelihood of running into an issue when shadowing a buildin
    # with a class attribute is very low
    "A003",
    # flake8-bugbear
    # fastapi recommends to use `Depend()` as an argument default.
    # Unfortunately, exceptions are hardcoded in bugbear.
    # https://github.com/PyCQA/flake8-bugbear/issues/62
    "B008",
    # Line too long (E501)
    # 1. black does not format comments
    #    https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html#comments
    # 2. long links in doc strings are an issue
    "E501",
]
select = [
    "A", # flake8 builtins
    "E", # pycodestyle error
    "W", # pycodestyle warning
    "F", # pyflakes
    "N", # pep8-naming
    "UP", # pyupgrade
    "B", # flake8-bugbear
    "I", # isort
    "C4", # flake8-comprehensions
    "T10", # flake8-debugger
    "ERA", # flake8-eradicate
    "G", # flake8-logging-format
    "C9", # mccabe
]

[tool.ruff.pep8-naming]
classmethod-decorators = [
    "classmethod",
    "validator",
    "root_validator",
]

[tool.ruff.per-file-ignores]
"*/__init__.py" = ["F401"]


[tool.pytest.ini_options]
addopts = """\
    --cov issx \
    --cov tests \
    --cov-report term-missing \
    --no-cov-on-fail \
"""

[tool.coverage.report]
fail_under = 100
exclude_lines = [
    'if TYPE_CHECKING:',
    'pragma: no cover'
]

[tool.mypy]
disallow_any_unimported = true
disallow_untyped_defs = true
no_implicit_optional = true
strict_equality = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_return_any = true
check_untyped_defs = true
show_error_codes = true
